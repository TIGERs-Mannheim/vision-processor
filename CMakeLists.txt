#    Copyright 2024 Felix Weinmann
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

cmake_minimum_required(VERSION 3.22)
project(vision_processor)

option(WITH_SPINNAKER "Build with Spinnaker support (if library available)" ON)
option(WITH_MVIMPACT "Build with mvIMPACT/Bluefox support (if library available)" ON)
option(PYTHON_ONLY "Build only protobuf components")

# Adapted from https://stackoverflow.com/a/48832234 CC BY-SA 4.0 by einpoklum
if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -ftree-vectorize -ffast-math")
add_compile_options("-Wall")
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

if(NOT PYTHON_ONLY)
    find_package(yaml-cpp REQUIRED)
    find_package(OpenCV REQUIRED COMPONENTS core imgproc imgcodecs videoio)
    find_package(PkgConfig REQUIRED)
    find_package(Eigen3 REQUIRED)
    pkg_check_modules(LIBAV REQUIRED IMPORTED_TARGET libavformat libavcodec libavutil)
    find_package(OpenCL REQUIRED)
endif()

find_package(Protobuf REQUIRED)
find_package(Spinnaker)
find_package(mvIMPACT)

add_compile_definitions(CL_HPP_TARGET_OPENCL_VERSION=300)
# m (c math) and stdc++ (c++ standard library) explicitly required by LLD
link_libraries("m" "stdc++" ${YAML_CPP_LIBRARIES} ${OpenCV_LIBS} PkgConfig::LIBAV ${SPINNAKER_LIBS} OpenCL::OpenCL ${Protobuf_LIBRARIES} ${mvIMPACT_LIBS})
include_directories(src ${YAML_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS} ${SPINNAKER_INCLUDE_DIRS} ${Protobuf_INCLUDE_DIRS} Eigen3::Eigen ${mvIMPACT_INCLUDE_DIRS})

file(GLOB PROTO_FILES proto/*.proto)
file(GLOB CL_KERNELS kernel/*.cl)
file(GLOB_RECURSE SRC src/*.cpp src/*.c)
list(REMOVE_ITEM SRC "${CMAKE_SOURCE_DIR}/src/main.cpp" "${CMAKE_SOURCE_DIR}/src/geometry_benchmark.cpp" "${CMAKE_SOURCE_DIR}/src/blob_benchmark.cpp")

# Adapted from https://stackoverflow.com/a/56006001 CC BY-SA 4.0 by Itay Grudev
file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/CMakeFiles/kernel")
set(CL_KERNEL_OBJECTS "")
set(CL_KERNEL_HEADER "//Autogenerated by CMake, edits will be overridden\n#pragma once\n#include <cstddef>")
foreach(input_file IN LISTS CL_KERNELS)
    cmake_path(GET input_file FILENAME input_filename)
    string(REPLACE . _ input_file_cname "${input_file}")
    string(REPLACE / _ input_file_cname "${input_file_cname}")
    string(REPLACE . _ input_filename_cname "${input_filename}")
    set(output_file "${CMAKE_BINARY_DIR}/CMakeFiles/kernel/${input_filename}.o")

    # lld seems to need "-m elf_amd64" (or achitecture equivalent)
    add_custom_command(
            OUTPUT "${output_file}"
            COMMAND ${CMAKE_LINKER} --relocatable --format binary --output "${output_file}" "${input_file}"
            DEPENDS "${input_file}"
    )

    list(APPEND CL_KERNEL_OBJECTS ${output_file})
    string(APPEND CL_KERNEL_HEADER "\n\nextern const char kernel_${input_filename_cname}[] asm(\"_binary_${input_file_cname}_start\");\nextern const char kernel_${input_filename_cname}_end[] asm(\"_binary_${input_file_cname}_end\");")
endforeach()
link_libraries(${CL_KERNEL_OBJECTS})

# Don't override cl_kernels.h if already up-to-date to prevent unnecessary recompilation
if(EXISTS "${CMAKE_SOURCE_DIR}/src/cl_kernels.h")
    file(READ "${CMAKE_SOURCE_DIR}/src/cl_kernels.h" CL_KERNEL_HEADER_OLD)
endif()
if(NOT "${CL_KERNEL_HEADER_OLD}" STREQUAL "${CL_KERNEL_HEADER}")
    file(WRITE "${CMAKE_SOURCE_DIR}/src/cl_kernels.h" "${CL_KERNEL_HEADER}")
    message(STATUS "(Re-)Generated cl_kernels.h")
endif()

add_custom_target(AUTOGENERATE DEPENDS ${CL_KERNEL_OBJECTS})
protobuf_generate(TARGET AUTOGENERATE LANGUAGE cpp PROTOC_OUT_DIR "${CMAKE_SOURCE_DIR}/src" PROTOS ${PROTO_FILES})
get_property(PROTO_SRCS TARGET AUTOGENERATE PROPERTY SOURCES)
list(APPEND SRC ${PROTO_SRCS})

add_executable(${PROJECT_NAME} ${SRC} "src/main.cpp")
add_executable("geometry_benchmark" ${SRC} "src/geometry_benchmark.cpp")
add_executable("blob_benchmark" ${SRC} "src/blob_benchmark.cpp")

add_dependencies(${PROJECT_NAME} AUTOGENERATE)
add_dependencies("geometry_benchmark" AUTOGENERATE)
add_dependencies("blob_benchmark" AUTOGENERATE)

install(TARGETS ${PROJECT_NAME} DESTINATION /usr/local/bin)
